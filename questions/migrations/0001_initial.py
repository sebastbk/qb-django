# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-11-28 21:50
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=30)),
                ('description', models.TextField(max_length=255)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='questions_collections', related_query_name='questions_collection', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(related_name='likes_questions_collections', related_query_name='likes_questions_collection', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('answer', models.CharField(max_length=30)),
                ('alt_answer', models.CharField(blank=True, max_length=30)),
                ('answer_widget', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('time', 'Time')], default='text', max_length=6)),
                ('text', models.TextField(max_length=255)),
                ('difficulty', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='questions_questions', related_query_name='questions_question', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(related_name='likes_questions_questions', related_query_name='likes_questions_question', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(related_name='questions_questions', related_query_name='questions_question', to='common.Tag')),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=30)),
                ('description', models.TextField(max_length=255)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='questions_sets', related_query_name='questions_set', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(related_name='likes_questions_sets', related_query_name='likes_questions_set', to=settings.AUTH_USER_MODEL)),
                ('questions', models.ManyToManyField(related_name='sets', related_query_name='set', to='questions.Question')),
                ('tags', models.ManyToManyField(related_name='questions_sets', related_query_name='questions_set', to='common.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='collection',
            name='questions',
            field=models.ManyToManyField(related_name='collections', related_query_name='collection', to='questions.Question'),
        ),
        migrations.AddField(
            model_name='collection',
            name='tags',
            field=models.ManyToManyField(related_name='questions_collections', related_query_name='questions_collection', to='common.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='set',
            unique_together=set([('created_by', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together=set([('created_by', 'title')]),
        ),
    ]
